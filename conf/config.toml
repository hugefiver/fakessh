[server]
# bind = ":22"
# version = "OpenSSH_8.8p1"
# max_try = 3
# delay = 0
# deviation = 0
# anti_scan = true
# success_ratio = 0.0
# success_seed = "anything"

# rate limit array
#[[server.rate_limit]]
#interval = 60
#limit = 10

#[[server.rate_limit]]
#interval = "1m"
#limit = 10

# Users with password can login
# `user.name` cannot duplicate or be empty
#[[server.users]]
#name = "root"
#password = "123456"

# How many unauthenticated connections can be connected at the same time
[server.max_conn]
# `max` < 0 means unlimited
# `max` = 0 or optional means default: 100
max = 0
# when connections exceed `hard_max`, new connection will be rejected
# `hard_max` <= 0 or `hard_max` <= `max`, will be max(default, 2 times of `max`), default: 65535
hard_max = 0
# `loss_ratio` in (0.0, 1.0]
# when `loss_ratio` <= 0.0 or > 1.0, it means 1.0
# if connections match `max`, it will literally increase to 1.0 when connectios meet `hard_max`
loss_ratio = 1.0

# Same as `max_conn`, but for successful connections
[server.max_succ_conn]
# default: 5
max = 0
# default: 10
hard_max = 0
loss_ratio = 1.0

[log]
# file = ""
# level = "info"
# format = "plain"
# log_passwd = false

[key]
# key = []
# type = "ed25519" # e.g. "ed25519,rsa:2048,ecdsa:256"

[modules.gitserver]
# enable = false

# user used serve git service
# default: git
#user = "git"

# if true, git-shell will run with current user
# default: false
#current_user = false

# user used to connect from ssh
# default same with field `user`
#ssh_user = "git"

# path of `git-shell` execute file
# empty means search in `PATH`
#git_shell = "/usr/bin/git-shell"

# path to store git repositories
# default: /home/git
#git_user_home = "/home/git"

# path of `authorized_keys` file
# default: {git_user_home}/.ssh/authorized_keys
#authorized_keys = "/home/git/.ssh/authorized_keys"

# if true, authorized_keys will be auto updated
#watch_keys = false

# max_git_shell_processes = 0
# refuse_when_busy = false

[modules.fakeshell]
enable = false

#rootfs = "/path/to/rootfs.tar"
# or
#rootfs = "/path/to/rootfs.zip"
# or
#rootfs = "/path/to/somewhere"

#[modules.fakeshell.env]
#user = "root"
#home = "/root"
#os = "FairyOS"
#kernel = "ctOS 3.1"
#hostname = "fakeshell"

#genenv = true
#envs = {"ENV1" = "VALUE1", "ENV2" = "VALUE2"}

#[modules.fakeshell.log]
#enable = false

# log path must be a directory
# if it's empty, wile be "./sessions" in current directory
# attackers' input will log to "$log_path/*.log[.gz|.xz|zstd]"
#path = ""

# compress method in ["", "gzip", "xz", "zstd"]
#compress = ""
